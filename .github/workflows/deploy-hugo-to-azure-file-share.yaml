name: Build and Deploy Hugo to Azure Container App

on:
  push:
    branches:
      - main  # Change to your default branch if different
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  id-token: write

concurrency:
  group: "deploy-azure-webapp"
  cancel-in-progress: false

jobs:
  # Build Job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.135.0  # Specify your desired Hugo version
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip

      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb
          sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Node.js Dependencies
        run: |
          [[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true

      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
          TZ: America/Los_Angeles
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"  

      - name: Zip Public Folder
        run: |
          cd public
          zip -r ../deploy.zip .  # Zips the contents of 'public/' into 'deploy.zip'

      - name: Verify deploy.zip Contents
        run: |
          echo "Contents of deploy.zip:"
          unzip -l ./deploy.zip

      - name: Check deploy.zip Size
        run: |
          ls -lh ./deploy.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: deploy
          path: ./deploy.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: deploy
          path: ./deploy

      - name: Verify Downloaded deploy.zip
        run: |
          echo "Contents of downloaded deploy.zip:"
          unzip -l ./deploy/deploy.zip
          ls -lh ./deploy/deploy.zip

      - name: Authenticate with Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Check if temp/ directory exists, if not create it
      - name: Check or Create temp/ Directory
        run: |
          echo "Checking if temp/ directory exists..."
          EXISTS=$(az storage directory exists \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
            --share-name ${{ secrets.AZURE_FILE_SHARE_NAME }} \
            --name temp \
            --auth-mode login \
            --query exists \
            --enable-file-backup-request-intent)
          if [ "$EXISTS" == "false" ]; then
            echo "temp/ directory does not exist, creating it..."
            az storage directory create \
              --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
              --share-name ${{ secrets.AZURE_FILE_SHARE_NAME }} \
              --name temp \
              --auth-mode login \
              --enable-file-backup-request-intent
          else
            echo "temp/ directory exists."
          fi

      # Check if public/ directory exists, if not create it
      - name: Check or Create public/ Directory
        run: |
          echo "Checking if public/ directory exists..."
          EXISTS=$(az storage directory exists \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
            --share-name ${{ secrets.AZURE_FILE_SHARE_NAME }} \
            --name public \
            --auth-mode login \
            --query exists \
            --enable-file-backup-request-intent)
          if [ "$EXISTS" == "false" ]; then
            echo "public/ directory does not exist, creating it..."
            az storage directory create \
              --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
              --share-name ${{ secrets.AZURE_FILE_SHARE_NAME }} \
              --name public \
              --auth-mode login \
              --enable-file-backup-request-intent
          else
            echo "public/ directory exists."
          fi

      # Upload new site content to temp/ directory
      - name: Upload New Hugo Site to Azure temp/ Directory
        run: |
          echo "Uploading new files to temp/ directory..."
          unzip -o ./deploy/deploy.zip -d ./public
          az storage file upload-batch \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
            --destination ${{ secrets.AZURE_FILE_SHARE_NAME }}/temp \
            --source ./public

      # Delete all files from public/ directory
      - name: Delete Old Files in Azure public/ Directory
        run: |
          echo "Deleting old files in the Azure public/ directory..."
          az storage file delete-batch \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
            --source ${{ secrets.AZURE_FILE_SHARE_NAME }}/public \
            --pattern '*' \
            --auth-mode login \
            --enable-file-backup-request-intent

      # Delete the public/ directory
      - name: Delete public/ Directory
        run: |
          echo "Deleting public/ directory..."
          az storage directory delete \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
            --share-name ${{ secrets.AZURE_FILE_SHARE_NAME }} \
            --name public \
            --auth-mode login \
            --enable-file-backup-request-intent

      # Rename temp/ to public/
      - name: Rename temp/ to public/
        run: |
          echo "Renaming temp/ directory to public/..."
          az storage directory rename \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
            --share-name ${{ secrets.AZURE_FILE_SHARE_NAME }} \
            --source-path temp \
            --destination-path public \
            --auth-mode login \
            --enable-file-backup-request-intent

      # Create a new empty temp/ directory
      - name: Create New temp/ Directory
        run: |
          echo "Creating new temp/ directory..."
          az storage directory create \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
            --share-name ${{ secrets.AZURE_FILE_SHARE_NAME }} \
            --name temp \
            --auth-mode login \
            --enable-file-backup-request-intent

      - name: Cleanup
        run: |
          rm -rf deploy public

