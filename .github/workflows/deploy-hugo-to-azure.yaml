name: Build and Deploy Hugo to Azure WebApp

on:
  push:
    branches:
      - main  # Change to your default branch if different
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  id-token: write

concurrency:
  group: "deploy-azure-webapp"
  cancel-in-progress: false

jobs:
  # Build Job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.128.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb
          sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Node.js Dependencies
        run: |
          [[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true

      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
          TZ: America/Los_Angeles
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "https://your-site-url/"  # Replace with your actual base URL

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: public
          path: ./public

  # Deploy Job
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: public
          path: ./public

      - name: Install Azure CLI and xmlstarlet
        run: |
          sudo apt-get update
          sudo apt-get install -y xmlstarlet
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Publishing Profile
        id: publish_profile
        run: |
          az webapp deployment list-publishing-profiles \
            --name ${{ secrets.AZURE_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --xml > publishProfile.xml

      - name: Extract Kudu Credentials
        id: extract_kudu
        run: |
          # Extract the MSDeploy profile details using xmlstarlet
          USERNAME=$(xmlstarlet sel -t -v "//publishProfile[@publishMethod='MSDeploy']/userName" publishProfile.xml)
          PASSWORD=$(xmlstarlet sel -t -v "//publishProfile[@publishMethod='MSDeploy']/userPWD" publishProfile.xml)

          # Validate extraction
          if [ -z "$USERNAME" ] || [ -z "$PASSWORD" ]; then
            echo "Failed to extract Kudu credentials."
            exit 1
          fi

          # Define the Kudu API URL targeting the 'public' folder
          KUDU_API_URL="https://${{ secrets.AZURE_APP_NAME }}.scm.azurewebsites.net/api/vfs/site/wwwroot/public/"

          # Output the variables for use in subsequent steps
          echo "KUDU_API_URL=${KUDU_API_URL}" >> $GITHUB_OUTPUT
          echo "USERNAME=${USERNAME}" >> $GITHUB_OUTPUT
          echo "PASSWORD=${PASSWORD}" >> $GITHUB_OUTPUT

      - name: Delete Existing Public Folder
        run: |
          echo "Deleting existing 'public/' folder in Azure WebApp..."
          response=$(curl -X DELETE -s -w "%{http_code}" -o /dev/null -u "${{ steps.extract_kudu.outputs.USERNAME }}:${{ steps.extract_kudu.outputs.PASSWORD }}" "${{ steps.extract_kudu.outputs.KUDU_API_URL }}")
          if [[ "$response" != "200" && "$response" != "204" ]]; then
            echo "Failed to delete 'public/' folder. HTTP Status: $response"
            exit 1
          fi

      - name: Upload New Public Folder
        run: |
          echo "Uploading new 'public/' folder to Azure WebApp..."

          # Zip the public/ folder
          cd public
          zip -r ../public.zip ./*
          cd ..

          # Upload the zipped 'public/' folder via Kudu's Zip API
          response=$(curl -X PUT -s -w "%{http_code}" -o /dev/null -u "${{ steps.extract_kudu.outputs.USERNAME }}:${{ steps.extract_kudu.outputs.PASSWORD }}" \
            -H "Content-Type: application/zip" \
            --data-binary @public.zip \
            "${{ steps.extract_kudu.outputs.KUDU_API_URL }}")

          if [[ "$response" != "200" && "$response" != "201" && "$response" != "204" ]]; then
            echo "Failed to upload 'public/' folder. HTTP Status: $response"
            exit 1
          fi

      - name: Cleanup
        run: |
          rm publishProfile.xml
          rm public.zip
